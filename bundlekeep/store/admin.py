from django.contrib import admin
from .models import Product, Bundle, Category, Sale, SaleItem, BundleItem, SaleBundleItem, AvitoAd, City
from django.utils.html import format_html
from django.utils.safestring import mark_safe


class BundleItemInline(admin.TabularInline):
    model = BundleItem
    extra = 1


class SaleItemInline(admin.TabularInline):
    model = SaleItem
    extra = 1

@admin.register(Sale)
class SaleAdmin(admin.ModelAdmin):
    list_display = ("id", "date", "customer_name", "total_amount")
    inlines = [SaleItemInline]

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = (
        "name", "category", "price", "cost", "profit_display", "competitor_price", "colored_price_diff", 
        "margin_display", "supplier_link", "competitor_link", "created_at")
    list_filter = ("product_type", "category")  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
    search_fields = ("name",)
    
    readonly_fields = ("description_with_copy",)
    
    def profit_display(self, obj):
        return f"{obj.profit()} ‚ÇΩ"
    profit_display.short_description = "–ü—Ä–∏–±—ã–ª—å"

    def margin_display(self, obj):
        return f"{obj.margin_percent()} %"
    margin_display.short_description = "–ú–∞—Ä–∂–∞ %"
    
    def supplier_link(self, obj):
        if obj.supplier_url:
            return format_html('<a href="{}" target="_blank">–ü–æ—Å—Ç–∞–≤—â–∏–∫</a>', obj.supplier_url)
        return "-"
    supplier_link.short_description = "–°–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"

    def competitor_link(self, obj):
        if obj.competitor_url:
            return format_html('<a href="{}" target="_blank">–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç</a>', obj.competitor_url)
        return "-"
    competitor_link.short_description = "–°–∞–π—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"
    
    
    
    def colored_price_diff(self, obj):
        diff = obj.price_diff()
        if diff is None:
            return "-"
        if diff < 0:  # —É –Ω–∞—Å –¥–µ—à–µ–≤–ª–µ
            color = "green"
        elif diff > 0:  # —É –Ω–∞—Å –¥–æ—Ä–æ–∂–µ
            color = "red"
        else:
            color = "gray"
        return format_html('<span style="color: {};">{} ‚ÇΩ</span>', color, diff)

    colored_price_diff.short_description = "–†–∞–∑–Ω–∏—Ü–∞ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º"
    
    def description_with_copy(self, obj):
        if not obj.description:
            return "-"
        return mark_safe(f"""
            <textarea id="desc_{obj.id}" style="width:100%; height:120px;">{obj.description}</textarea>
            <button type="button" onclick="navigator.clipboard.writeText(document.getElementById('desc_{obj.id}').value)">
                üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
        """)
    description_with_copy.short_description = "–û–ø–∏—Å–∞–Ω–∏–µ"

@admin.register(Bundle)
class BundleAdmin(admin.ModelAdmin):
    list_display = ("name", "discount", "total_price_display", "total_cost_display", "profit_display", "margin_display")

    def total_price_display(self, obj):
        return f"{obj.total_price()} ‚ÇΩ"
    total_price_display.short_description = "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"

    def total_cost_display(self, obj):
        return f"{obj.total_cost()} ‚ÇΩ"
    total_cost_display.short_description = "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"

    def profit_display(self, obj):
        return f"{obj.profit()} ‚ÇΩ"
    profit_display.short_description = "–ü—Ä–∏–±—ã–ª—å"

    def margin_display(self, obj):
        return f"{obj.margin_percent()} %"
    margin_display.short_description = "–ú–∞—Ä–∂–∞ %"
    
    
class AvitoAdInline(admin.TabularInline):
    model = AvitoAd
    extra = 1
    fields = ('title', 'price', 'competitor_price', 'published', 'avito_url')
    readonly_fields = ('avito_url',)

    def avito_url(self, obj):
        if obj.avito_url:
            return f'<a href="{obj.avito_url}" target="_blank">{obj.avito_url}</a>'
        return "-"
    avito_url.allow_tags = True
    avito_url.short_description = "Avito —Å—Å—ã–ª–∫–∞"
    
@admin.register(City)
class CityAdmin(admin.ModelAdmin):
    list_display = ('name',)


@admin.register(AvitoAd)
class AvitoAdAdmin(admin.ModelAdmin):
    list_display = ('title', 'price', 'competitor_price', 'published')
    list_filter = ('published', 'cities')
    search_fields = ('title', 'description')
    filter_horizontal = ('cities',)